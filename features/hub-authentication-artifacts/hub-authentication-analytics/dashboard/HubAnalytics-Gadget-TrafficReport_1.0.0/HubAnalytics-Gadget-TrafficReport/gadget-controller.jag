<%
/**
 *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
(function () {
    include("../HubAnalytics-Gadget-Commons/constants.jag");
    include("../HubAnalytics-Gadget-Commons/controller-util.jag");

    var log = new Log();
    response.contentType = 'application/json';

    var FILE_NAME = FILE_NAMES.TRAFFIC_REPORT;
    var action = request.getParameter("action");
    var filter = request.getParameter("filter");
    var draw = request.getParameter("draw");
    var data = request.getContent();
    var loggedInUser = getLoggedInUser();
    var providerConf = data[PROVIDER_CONF];
    var filelist = data["files"];
    var deleteall = false;

    if (action === "getLoggedInUser") {
        var jsonUser = {"LoggedInUser": loggedInUser};
        print(jsonUser);
        return;
    }

    if (action === 'getSchema') {
        var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');
        print(providerAPI.getSchema(providerConf));
        return;

    } else if (action === 'getData') {
        var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');
        providerConf = getDataProviderConfQuery(providerConf, data);
        print(providerAPI.getData(providerConf));

        log.info("Table ==> " + providerConf.tableName);
        log.info("query ==> " + providerConf.query);
        return;
    }

    else if (loggedInUser != null) {

        var userReportDirectory = "/reports/traffic/" + loggedInUser.username.replace("@carbon.super","") + "/";
        var directory = "repository/deployment/server/jaggeryapps/portal" + userReportDirectory;
        var reportPrefix = loggedInUser.username.replace("@carbon.super","") + FILE_NAME;

        if (loggedInUser.hasNoRole) {
            print({'message': 'Not Allowed!'});
            return;
        }

        if (action == "generateCSV") {
            var fileAppend = getFileAppend(data);
            var carbon = require('carbon');

            var reportName = directory + reportPrefix +fileAppend + new Date().getTime();
            //check wte extension file is exist in path.if yes show rerport generation in progress msg.

            var istmpAvailable = istmpfileavaliable(userReportDirectory, (reportPrefix+fileAppend));
            if (istmpAvailable) {
                print({'message': 'File is being generated'});
            }

            removeAllFiles(userReportDirectory, (reportPrefix+fileAppend));

            var service = carbon.server.osgiService('org.wso2telco.analytics.hub.report.engine.ReportEngineService');
            var reportMaxLength = 10;

            providerConf = getDataProviderConfQuery(providerConf, data);

            var reportType = "trafficCSV";
            service.generateReport(providerConf.tableName, providerConf.query, reportName, reportMaxLength, reportType, null, null, null, null);
            print({'message': 'Report is generating'});
            return;
        } else if (action == "available") {
            var carbon = require('carbon');
            var carbonhome = carbon.server.home.replace(/file(\:)(\/\/\/)/, "");
            var reportdir = "/" + carbonhome + "/repository/deployment/server/jaggeryapps/portal" + userReportDirectory;
            var service = carbon.server.osgiService('org.wso2telco.analytics.hub.report.engine.ReportEngineService');
            var dirFileList = service.getFilelistbyDate(reportdir);

            var files = [];
            for (var i = 0; i < dirFileList.length; i++) {
                var fileName = dirFileList[i];
                files.push({"filename":fileName,"myrowid":fileName});
            }

            var result = '{  "draw": '+draw+', "recordsTotal": '+files.length+',  "recordsFiltered": '+ files.length +',  "data":' + stringify(files) +' }';
            print(result);
            return;
        } else if (action == "get" && request.getParameter("index") != null) {
            var carbon = require('carbon');
            var carbonhome = carbon.server.home;
            var file = new File(carbonhome + "/tmp/zipdir/" + loggedInUser.username.replace("@carbon.super","") + "_traffic" + "_reports.zip");
            response.contentType = "application/zip";
            response.addHeader("Content-Disposition", "attachment; filename=" + file.getName());
            print(file.getStream());
        } else if (action == "remove" && request.getParameter("index") != null) {
            var file = new File(userReportDirectory);
            var result = file.listFiles()[request.getParameter("index")].del();
            print({"fileDeleted": result});
            return;
        } else if (action == "removefile") {
            deleteall = false;
            print({"fileDeleted":removeFiles(userReportDirectory, filelist, deleteall)});
            return;
        } else if (action == "removeallfiles") {
            deleteall = true;
            print({"fileDeleted":removeFiles(userReportDirectory, filelist, deleteall)});
            return;
        } else if (action == "downlaodzip") {

            var carbon = require('carbon');
            var carbonhome = carbon.server.home.replace(/file(\:)(\/\/\/)/, "");
            var filePath = directory;
            var service = carbon.server.osgiService('org.wso2telco.analytics.hub.report.engine.ReportEngineService');
            var zipStatus = service.generateZipFile(carbonhome, filePath, filelist, loggedInUser.username.replace("@carbon.super",""),"traffic");

            print({"zipStatus":zipStatus});
        }
    }
}());

function getDataProviderConfQuery(providerConf, data) {
    var loggedInUser = getLoggedInUser();
    var serviceProvider = "";

    if (loggedInUser.isServiceProvider) {
        serviceProvider = loggedInUser.username;
    }

    providerConf.query = "";
    var all = true;
    if (providerConf[PROVIDER_NAME] == BATCH) {
        var timeRangeUtil = Packages.org.wso2.analytics.shared.util.time.TimeRangeUtils;
        var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(data.dateStart, data.dateEnd);
        timeUnit = (( timeUnit == 'MINUTE') || ( timeUnit == 'SECOND')) ? 'HOUR' : timeUnit;
        var tableName = providerConf.tableName + timeUnit;
        providerConf.query += "eventTimeStamp:[" + data.dateStart + " TO " + data.dateEnd + "]";

        if(loggedInUser.isOperatorAdmin) {
            providerConf.query += " AND operatorName:" + loggedInUser.operatorNameInProfile;

        } else {
            if (data.operatorName != "all" && data.operatorName != undefined) {
                providerConf.query += " AND operatorName:" + data.operatorName;
            }
        }

        if (data.serviceProvider != "0" && data.serviceProvider != undefined) {
            providerConf.query += " AND serviceProviderId:" + "\"" + data.serviceProvider + "\"";
        }

        if (data.applicationName != "0" && data.applicationName != undefined) {
            providerConf.query += " AND applicationId:" + data.applicationName;
        }

        if (data.api != "0" && data.api != undefined) {
            providerConf.query += " AND apiID:" + data.api;
        }

        providerConf.query += " AND direction:" + "\""+ "sb" + "\"";
        providerConf.tableName = tableName;

    } else if (providerConf[PROVIDER_NAME] == TYPE.OPERATOR) {
        if (data.operatorName != "all" && data.operatorName != undefined) {
            providerConf.query += "operatorName:" +  data.operatorName ;
            all = false;
        }

    } else if (providerConf[PROVIDER_NAME] == TYPE.SP) {

        if (data.serviceProvider != "0" && data.operatorName != undefined) {
            if(data.operatorName != "all")  {
                providerConf.query += "serviceProviderId:"  + data.serviceProvider +" AND operatorName:"  + data.operatorName ;
            } else  {
                providerConf.query += "serviceProviderId:"  + data.serviceProvider ;
            }
            all = false;

        } else if (loggedInUser.isOperatorAdmin) {
            providerConf.query += "operatorName:"  + data.operatorName ;
        } else if(data.operatorName != undefined){
            providerConf.query += "operatorName:"  + data.operatorName ;
        }
    } else if (providerConf[PROVIDER_NAME] == TYPE.APP) {
        if (data.applicationId != "()" && data.applicationId != "0" && data.operatorName != undefined) {
            providerConf.query += "applicationId:" + data.applicationId;
            all = false;
        } else if (data.operatorName != undefined) {
            providerConf.query += "operatorName:" + data.operatorName;
        }
    }

    var andSign = '';
    if ((!(loggedInUser.isAdmin) && all == false) || (providerConf[PROVIDER_NAME] == BATCH)) {
        andSign = ' AND ';
    }

    if (loggedInUser.isServiceProvider && (providerConf[PROVIDER_NAME] == TYPE.OPERATOR || providerConf[PROVIDER_NAME] == TYPE.SP)) {
        providerConf.query += andSign + ' _serviceProvider:"' + serviceProvider + '"';
        providerConf.tableName = STREAM.API_SUMMERY;


    } else if (loggedInUser.isServiceProvider && providerConf[PROVIDER_NAME] == BATCH) {
        providerConf.query += andSign + ' _serviceProvider:"' + serviceProvider + '"';

    } else if (loggedInUser.isPublisher && (providerConf[PROVIDER_NAME] == TYPE.OPERATOR || providerConf[PROVIDER_NAME] == BATCH)) {
        providerConf.query += andSign + ' _serviceProvider:"' + serviceProvider + '"';
    }

    return providerConf;
};

function removeAllFiles(userReportDirectory, reportPrefix1) {
    var filedir = new File(userReportDirectory);
    var fileList = filedir.listFiles();
    var re = reportPrefix1+'(\\d+)';
    for (var i = 0; i < fileList.length; i++) {
        var file = fileList[i];

        if (new RegExp(re,'g').test(file.getName())) {
            log.info("File " + file.getName() + " deleted.");
            var result = file.del();
        }
    }
}

function removeFiles(userReportDirectory, filelist, delall) {
    var filedeleted;
    if (delall) {
        var file = new File(userReportDirectory);
        var fileslist = file.listFiles();
        var filecount = fileslist.length;
        for (var x = 0; x < filecount; x++) {
            filedeleted = fileslist[x].del();
            if (filedeleted) {
                log.info("File " + fileslist[x].getName() + " deleted");
            }
        }
    } else {
        var fileArray = filelist;
        for (var x = 0; x < fileArray.length; x++) {
            var file = new File(userReportDirectory + "/" + fileArray[x]);
            filedeleted = file.del();

            if (filedeleted) {
                log.info("File " + file.getName() + " deleted.");
            } else {
                log.info("File " + file.getName() + " not deleted.");
            }
        }
    }
    return filedeleted;
}

function istmpfileavaliable (userReportDirectory, reportPrefix) {
    var file = new File(userReportDirectory);
    var istmpAvailable = false;
    for (var i = 0; i < file.listFiles().length; i++) {
        if (!file.listFiles()[i].getName().search(reportPrefix)) {
            if (file.listFiles()[i].getName().split(".").pop() == "wte") {
                istmpAvailable = true;
            }
        }
    }
    return istmpAvailable;
};

%>